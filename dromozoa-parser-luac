#! /usr/bin/env lua

-- Copyright (C) 2017 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-parser.
--
-- dromozoa-parser is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-parser is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-parser.  If not, see <http://www.gnu.org/licenses/>.

local write_html = require "dromozoa.parser.write_html"
local symbol_value = require "dromozoa.parser.value"
local lua53_lexer = require "dromozoa.parser.lexers.lua53_lexer"
local lua53_parser = require "dromozoa.parser.parsers.lua53_parser"

local source_file, html_file = ...
local source

if source_file then
  local handle = assert(io.open(source_file))
  source = handle:read("*a")
  handle:close()
else
  source = io.read("*a")
end

local lexer = lua53_lexer()
local parser = lua53_parser()

local symbol_names = parser.symbol_names
local symbol_table = parser.symbol_table
local max_terminal_symbol = parser.max_terminal_symbol
local terminal_nodes = assert(lexer(source, file))
local root = assert(parser(terminal_nodes, source, file))

local id = 0
local nodes = {}

local stack1 = { root }
local stack2 = {}
while true do
  local n1 = #stack1
  local u = stack1[n1]
  if not u then
    break
  end
  local n2 = #stack2
  if u == stack2[n2] then
    stack1[n1] = nil
    stack2[n2] = nil
    nodes[#nodes + 1] = u
  else
    id = id + 1
    u.id = id

    local parent = u.parent
    if parent then
      local parent_path = parent.path
      local path = {}
      for i = 1, #parent_path do
        path[i] = parent_path[i]
      end
      path[#path + 1] = id

      u.depth = parent.depth + 1
      u.path = path
    else
      u.depth = 1
      u.path = { id }
    end

    local n = #u
    for i = n, 1, -1 do
      local v = u[i]
      v.parent = u
      stack1[#stack1 + 1] = v
    end
    stack2[n2 + 1] = u
  end
end

local line_number = source:find("\n$") and 0 or 1
for _ in source:gmatch("\n") do
  line_number = line_number + 1
end

local number_html = { "div"; class = "number" }
for i = 1, line_number do
  number_html[#number_html + 1] = { "span";
    id = "L" .. i;
    i .. "\n";
  }
end

local source_left = math.ceil(math.log(line_number, 10)) * 0.5 + 1

local source_html = { "div"; class = "source" }
for i = 1, #terminal_nodes do
  local u = terminal_nodes[i]
  local s = u[0]

  local p = u.p
  local i = u.i
  local j = u.j

  local id = u.id

  if id then
    id = "S" .. id
  end

  local class = {}

  local path = u.path
  if path then
    for i = 1, #path do
      class[#class + 1] = "S" .. path[i]
    end
  end

  local highlight = {}
  if s == symbol_table.LiteralString then
    highlight = { "constant", "string" }
  elseif s == symbol_table.IntegerConstant then
    highlight = { "constant", "number", "integer" }
  elseif s == symbol_table.FloatConstant then
    highlight = { "constant", "number", "float" }
  elseif s == symbol_table["false"] or s == symbol_table["true"] then
    highlight = { "constant", "boolean" }
  elseif s == symbol_table["nil"] then
    highlight = { "constant" }
  elseif s == symbol_table["and"] or s == symbol_table["not"] or s == symbol_table["or"] or s == symbol_table[".."] then
    highlight = { "statement", "operator" }
  elseif s == symbol_table["function"] or s == symbol_table["{"] or s == symbol_table["}"] then
    highlight = { "type", "structure" }
  elseif s == symbol_table["end"] then
    if u.funcbody_end then
      highlight = { "type", "structure" }
    else
      highlight = { "statement" }
    end
  elseif s ~= symbol_table.Name then
    local value = symbol_value(u)
    if value:find("^[a-z]") then
      highlight = { "statement" }
    elseif value:find("^[+%-*/%%^#&~|<>=]") then
      highlight = { "statement", "operator" }
    end
  end

  for i = 1, #highlight do
    class[#class + 1] = "highlight-" .. highlight[i]
  end

  if p < i then
    source_html[#source_html + 1] = { "span";
      class = "highlight-comment";
      source:sub(p, i - 1)
    }
  end

  if s ~= 1 then
    source_html[#source_html + 1] = { "span";
      id = id;
      class = class[1] and table.concat(class, " ");
      source:sub(i, j)
    }
  end
end

local style = [[
.source {
  left: ]] .. source_left .. [[rem;
}
]]

local out = assert(io.open(html_file, "w"))
write_html(out, { "html";
  { "head";
    { "meta"; charset = "UTF-8" };
    { "title"; source_file };
    { "link"; rel = "stylesheet"; href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" };
    { "link"; rel = "stylesheet"; href = "dromozoa-parser-luac.css" };
    { "style"; style };
  };
  { "body";
    number_html;
    source_html;
    { "script"; src = "https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js" };
  };
})
out:write("\n")
out:close()
