#! /usr/bin/env lua

-- Copyright (C) 2019 Tomoyuki Fujimori <moyu@dromozoa.com>
--
-- This file is part of dromozoa-parser.
--
-- dromozoa-parser is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.
--
-- dromozoa-parser is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with dromozoa-parser.  If not, see <http://www.gnu.org/licenses/>.

local builder = require "dromozoa.parser.builder"
local regexp = require "dromozoa.parser.regexp"

local RE = builder.regexp

local help = [====[
Usage: %s [options] pattern [opeation pattern]...
Avairable options are:
  -h       --help
  -o FILE  --output=FILE
  -D       --dump
Avairable operations are:
  -u       --union
  -d       --difference
]====]

local dfa
local output
local dump

local a = 1
local i = 1
local n = #arg
while i <= n do
  local item = arg[i]
  i = i + 1
  if item == "-h" or item == "--help" then
    io.write(help:format(arg[0]))
    return
  elseif item == "-o" then
    output = assert(arg[i])
    i = i + 1
  elseif item:find "^%-%-output=.+" then
    output = assert(item:match "^%-%-output=(.+)")
  elseif item == "-D" or item == "--dump" then
    dump = true
  elseif item == "-u" or item == "--union" then
    local item = assert(arg[i])
    i = i + 1
    dfa = dfa:union(regexp(RE(item), a):nfa_to_dfa()):nfa_to_dfa():minimize()
    a = a + 1
  elseif item == "-d" or item == "--difference" then
    local item = assert(arg[i])
    i = i + 1
    dfa = dfa:difference(regexp(RE(item), a):nfa_to_dfa()):minimize()
    a = a + 1
  else
    assert(not dfa)
    dfa = regexp(RE(item), a):nfa_to_dfa():minimize()
    a = a + 1
  end
end
assert(dfa)
assert(output)

if dump then
  local g, u_labels, e_labels = dfa:remove_unreachable_states():to_graph()

  local out = assert(io.open(output, "wb"))

  local function dump_data(key, data)
    out:write(("%s="):format(key))
    local t = type(data)
    if t == "number" then
      out:write(("%d"):format(data))
    elseif t == "table" then
      out:write "{"
      for k, v in pairs(data) do
        local t = type(v)
        if t == "number" then
          out:write(("[%d]=%d;"):format(k, v))
        elseif t == "string" then
          out:write(("[%d]=%q;"):format(k,v))
        else
          error("invalid type " .. t)
        end
      end
      out:write "}"
    else
      error("invalid type " .. t)
    end
    out:write ";\n"
  end

  for i = 1, #arg do
    out:write(("-- arg[%d] %s\n"):format(i, arg[i]))
  end

  out:write "return {\n"
  dump_data("u_id", g.u.id)
  dump_data("u_n", g.u.n)
  dump_data("u_before", g.u.before)
  dump_data("u_after", g.u.after)
  dump_data("u_labels", u_labels)

  dump_data("e_id", g.e.id)
  dump_data("e_n", g.e.n)
  dump_data("e_before", g.e.before)
  dump_data("e_after", g.e.after)
  dump_data("e_labels", e_labels)

  dump_data("uv_first", g.uv.first)
  dump_data("uv_last", g.uv.last)
  dump_data("uv_before", g.uv.before)
  dump_data("uv_after", g.uv.after)
  dump_data("uv_target", g.uv.target)

  dump_data("vu_first", g.vu.first)
  dump_data("vu_last", g.vu.last)
  dump_data("vu_before", g.vu.before)
  dump_data("vu_after", g.vu.after)
  dump_data("vu_target", g.vu.target)

  out:write "}\n"

  out:close()
else
  dfa:remove_unreachable_states():write_graph(output)
end
